answer ( traverse_1 ( loc_2 ( m0 ) ) )
answer ( intersection ( state , next_to_2 ( largest_one ( number_of ( major_city ) , state ) ) ) )
answer ( largest_one ( count_1 ( border ), state ) )
answer (smallest(intersection(city, population_1)))
answer ( capital ( intersection ( state , next_to_2 ( m0 ) ) ) )
answer ( highest ( intersection ( place , loc_2 ( m0 ) ) ) )
answer ( intersection ( river , loc_2 ( m0 ) ) )
answer ( population_1 ( m0 ) )
Utterance: name all the rivers in m0
Answer: minimum(elevation_1(intersection(point, loc_2(m0))))
answer ( intersection ( state , next_to_2 ( m0 ) ) )
answer ( major ( city , loc_2 ( m0 ) ) )
answer ( argmax ( river , count ( intersection ( state , locus_1 ( river ) ) ) ) )
answer ( length_1 ( m0_river ) )
answer ( intersection ( state , traverse_1 ( intersection ( river , m0 ) ) ) )
answer ( intersection ( city , loc_2 ( m0 ) ) )
answer ( count ( intersection ( state , next_to_2 ( major , river ) ) ) )
answer ( intersection ( river , loc_2 ( m0 ) ) )
answer ( smallest( area_1, state ) )
answer ( highest ( peak , intersection ( state , country ) ) )
answer ( count ( intersection ( state , loc_2 ( city_name ( "m0" ) ) ) ) )
Parse: intersection ( river , loc_2 ( m0 ) )
answer ( largest ( intersection ( state , loc_2 ( m0 ) ) ) )
answer ( population_1 ( m0 ) )
answer ( border_1 ( state , loc_2 ( m0 ) ) )
answer ( largest_one ( population_1 , intersection ( city , loc_2 ( m0 ) ) ) )
answer ( length_1 ( shortest ( intersection ( river , loc_2 ( m0 ) ) ) ) )
answer ( intersection ( city , major_1 ( loc_2 ( m0 ) ) ) )
answer ( count ( intersection ( river , loc_2 ( m0 ) ) ) )
answer ( largest ( intersection ( city , loc_2 ( m0 ) ) ) )
answer ( population_1 ( largest ( intersection ( city , country_1 ( usa ) ) ) ) )
answer ( intersection ( state , loc_1 ( intersection ( capital , m0 ) ) ) )
answer ( intersection ( capital , loc_2 ( m0 ) ) )
answer ( lowest ( intersection ( place , point , loc_1 ( state ) ) ) )
answer ( largest_one ( population_1 , capital ) )
answer ( next_to_2 ( m0 ) )
answer ( population_1 ( m0 ) )
answer(largest_n(3, city, intersection(state, smallest(place, loc_2(m0)))))
answer ( longest ( intersection ( river , passes_through ( intersection ( state , borders_1 ( largest_one ( border_count , state ) ) ) ) ) ) )
answer ( population_1 ( m0 ) )
